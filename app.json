{
	"name": "Authorizer",
	"description": "Open source authentication and authorization solution for your applications. Bring your database and have complete control over the authentication, authorization and user data.",
	"keywords": [
		"authentication",
		"api",
		"graphql",
		"heroku",
		"postgres",
		"authorization",
		"authorizer"
	],
	"logo": "https://authorizer.dev/images/logo.png",
	"success_url": "/",
	"website": "https://authorizer.dev",
	"repository": "https://github.com/authorizerdev/authorizer",
	"formation": {
		"web": {
			"quantity": 1
		}
	},
	"addons": [
		"heroku-postgresql",
		"heroku-redis"
	],
	"env": {
		"DATABASE_TYPE": {
			"description": "Database type which you want to connect with. Currently supports sqlite, mysql, postgres",
			"value": "postgres"
		},
		"ADMIN_SECRET": {
			"description": "Authorizer admin secret, used to access master data",
			"generator": "secret"
		},
		"SMTP_HOST": {
			"description": "SMTP Host for sending emails for verification",
			"value": "smtp.gmail.com",
			"required": false
		},
		"SMTP_PORT": {
			"description": "SMTP Port used by SMTP host",
			"value": "587",
			"required": false
		},
		"SENDER_EMAIL": {
			"description": "Email using which the password should be sent",
			"required": false
		},
		"SENDER_PASSWORD": {
			"description": "Password for the above mentioned email",
			"required": false
		},
		"JWT_TYPE": {
			"description": "JWT encryption type",
			"value": "HS256"
		},
		"JWT_SECRET": {
			"description": "Random string that will be used for encrypting the JWT token",
			"generator": "secret"
		},
		"AUTHORIZER_URL": {
			"description": "Server URL. For heroku this will Your https://heroku_name.herokuapp.com",
			"required": false
		},
		"FORGOT_PASSWORD_URI": {
			"description": "URI for the forgot password page in your web application",
			"value": "reset-password",
			"required": false
		},
		"COOKIE_NAME": {
			"description": "Name for the cookie",
			"value": "authorizer",
			"required": false
		},
		"FACEBOOK_CLIENT_ID": {
			"description": "Facebook client ID for facebook login",
			"required": false
		},
		"FACEBOOK_CLIENT_SECRET": {
			"description": "Facebook client secret for facebook login",
			"required": false
		},
		"GOOGLE_CLIENT_ID": {
			"description": "Google client ID for google login",
			"required": false
		},
		"GOOGLE_CLIENT_SECRET": {
			"description": "Google client secret for google login",
			"required": false
		},
		"GITHUB_CLIENT_ID": {
			"description": "Github client ID for github login",
			"required": false
		},
		"GITHUB_CLIENT_SECRET": {
			"description": "Github client secret for github login",
			"required": false
		},
		"DISABLE_EMAIL_VERIFICATION": {
			"description": "Option to disable email verification during sign up process. This is helpful when you want to test a demo without setting up SMTP. If you set this to false, please configure SMTP env variables. For more information Read docs.",
			"value": "true",
			"required": false
		},
		"ALLOWED_ORIGINS": {
			"description": "Whitelist the URL for which this instance of authorizer is allowed",
			"value": "*"
		},
		"RESET_PASSWORD_URL": {
			"description": "URL where user is required to be redirected for password change",
			"value": "/reset-password"
		},
		"ROLES": {
			"description": "Comma separated list of roles that platform supports",
			"value": "user,supplier"
		},
		"PROTECTED_ROLES": {
			"description": "Comma separated list of protected roles for which sign-up is disabled",
			"value": "admin"
		},
		"DEFAULT_ROLES": {
			"description": "Default role that should be assigned to user. It should be one from the list of `ROLES` env.",
			"value": "user"
		},
		"JWT_ROLE_CLAIM": {
			"description": "JWT key to be used to validate the role field.",
			"value": "role"
		},
		"ORGANIZATION_NAME": {
			"description": "Your organization name. Default value is Authorizer. This is used in email and default login page",
			"required": false
		},
		"ORGANIZATION_LOGO": {
			"description": "Your organization logo. Default is Authorizer logo. This is used in email and default login page.",
			"required": false
		},
		"CUSTOM_ACCESS_TOKEN_SCRIPT": {
			"description": "Javascript function written in ES5 to add custom data to access token. This is useful while using tools like Hasura where you can give role base access to users based on JWT tokens",
			"required": false
		}
	},
	"stack": "container"
}
